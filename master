#pragma config(Sensor, dgtl3,  startButton,    sensorTouch)
#pragma config(Sensor, dgtl4,  emergencyButton, sensorTouch)
#pragma config(Motor,  port3,           leftMotor,     tmotorNone, openLoop)
#pragma config(Motor,  port4,           rightMotor,    tmotorNone, openLoop)
//*!!Code automatically generated by 'ROBOTC' configuration wizard               !!*//

//* Template Provided by Mr. Maguire - Applied STEM Lab - www.stationtechlab.com *//
/*
 Step: 1
 Project Title: Example of ROBOTC To run two motors
  Date: - 10/15/2018
  Section: 1700
  -Team Members & TL#'s (Below)-
 natalia strzyminska-1751
Leo lai-1724
Step: 2
  Task Description:

Step: 3
  Pseudocode: NOTE: (Beginning Pseudocode lines with a // will automatically convert them to comments when you paste them into the program)
  //push button
//start left motor
//start right motor
//wait time
//Stop left motor
//stop right motor
//wait time
//start right motor
//wait
//stop right motor
wait
//start left motor
//start right motor
//wait time
//start left motor
//wait time
//stop left motor
//wait time
//start left motor
//start right motor
//wait time
//Stop left motor
//stop right motor
//wait time
//start left motor
//wait time
//stop left motor
//wait time
//Start left motor
//start right motor
//wait


Step: 4 - copy and paste Pseudocode in between the {  } curley brackets after the task main below AFTER THE REPEAT FOREVER.

Step: 5 - convert Pseudocode to comments to explaning each step  - remember to add the // before each step to convert it to a comment

Step: 6 - Set up Motor and Sensors that are used for each task you listed
               - Note: Your emergencyButton is already set-up for you in Digital Port #2

Step: 7 - Drag and Drop the Code to the left of each //Pseudocode comment

*/

task emergency_stop_task()
{
   while(true)
   {
      if(SensorValue(emergencyButton) == 1)
      {
         stopAllTasks(); // this ends the program and all activity
      }
   }
}


task main()
{
   startTask(emergency_stop_task); // this must be here to run the subroutine before your task you code.

   	repeat(forever)       //Tells the Cortex that this program can run over and over again with out restarting the cortex
     {   //Program continues with the repeatable actions, within new curly braces



     //push button
//start left motor
//start right motor
//wait time
//Stop left motor
//stop right motor
//wait time
//start right motor
//wait
//stop right motor
//wait
//start left motor
//start right motor
//wait time
//start left motor
//wait time
//stop left motor
//wait time
//start left motor
//start right motor
//wait time
//Stop left motor
//stop right motor
//wait time
//start left motor
//wait time
//stop left motor
//wait time
//Start left motor
//start right motor
//wait




     }   //Program section ends with the repeatable actions here, within this curly braces
}
